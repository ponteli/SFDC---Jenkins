<project name="Get all DataTypes" default="refresh_book" basedir="." xmlns:sf="antlib:com.salesforce">

	<!-- load properties -->
	<property environment="env" />
	<property file="conf/build.properties" />
	<property file="conf/package.properties" />
	<!-- svn libs -->
	<property name="lib.svn.ant" value="./lib/svn" />

	<!-- ant contrib -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="lib/ant-contrib.jar" />
		</classpath>
	</taskdef>

	<!-- the salesforce ant_lib it was copied to folder ant lib -->
	<taskdef resource="com/salesforce/antlib.xml" uri="antlib:com.salesforce">
		<classpath>
			<pathelement location="lib/ant-salesforce_36.jar" />
		</classpath>
	</taskdef>

	<!-- path to the svnant libraries -->
	<path id="svnant.classpath">
		<fileset dir="${lib.svn.ant}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<!-- load the svn task -->
	<typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="svnant.classpath" />

	<!--svn Settings -->
	<svnSetting id="svn.settings" svnkit="false" javahl="false" username="${svn.user}" password="${svn.passwd}" />

	<!-- set session ID after login-->
	<condition property="sfdc.sessionId" value="">
		<not>
			<isset property="sfdc.sessionId" />
		</not>
	</condition>

	<!-- check variables jenkins -->
	<if>
		<not>
			<isset property="env.WORKSPACE" />
		</not>
		<then>
			<property name="svn.message" value="LOCAL UPDATE" />
		</then>
		<else>
			<property name="svn.message" value=" BUILD ${env.BUILD_NUMBER} - URL ${env.BUILD_URL}" />
		</else>
	</if>
	
	<!-- check svn local repository -->
	<condition property="work.dir.exists" value="true" else="false">
		<available file="${work.dir}" type="dir"/>
	</condition>
	
	<!--- *************************************************************************************************************************	-->
	<!--- ******************************************* TASKS ***********************************************************************	-->
	<!--- *************************************************************************************************************************	-->

	<!-- busca os tipos de objetos usando book api -->
	<target name="refresh_book"	depends="checkout,update,describeMetadata">
		<foreach list="${metadata.type}" param="value" delimiter="," 
			target="getmetadata" parallel="true" maxThreads="5" trim="true" />

		<antcall target="commit"/>
	</target>

	<!-- checkout project from svn -->
	<target name="checkout" unless="${work.dir.exists}">
		<delete dir="${work.dir}" />
		<mkdir dir="${work.dir}" />
		<!-- checkut project from svn -->
		<echo message="Checkut project ${svn.url}" />
		<svn refid="svn.settings" logFile="${work.dir}/svn_checkout.log">
			<checkout url="${svn.url}" depth="infinity" revision="HEAD" destPath="${work.dir}" />
		</svn>
	</target>
	
	<!-- update project from svn -->
	<target name="update" if="${work.dir.exists}">
		<!-- update project from svn -->
		<echo message="Update project ${svn.url}" />
		<svn refid="svn.settings" logFile="${work.dir}/svn_update.log">
			<update dir="${work.dir}" revision="HEAD" recurse="true" />
		</svn>
	</target>

	<!-- Describe Metadata -->
	<target name="describeMetadata">
		<sf:describeMetadata username="${sfdc.username}" password="${sfdc.password}" 
			sessionId="${sfdc.sessionId}" serverurl="${sfdc.serverurl}" 
			resultFilePath="${work.dir}/describe.txt" />
	</target>

	<!-- faz o download do metadata de acordo com o tipo -->
	<target name="getmetadata">
		<echo message="GET META DATA --> ${value}" />

		<sf:bulkRetrieve username="${sfdc.username}" password="${sfdc.password}" sessionId="${sfdc.sessionId}" 
			serverurl="${sfdc.serverurl}" maxPoll="${sfdc.maxPoll}" metadataType="${value}" 
			batchSize="${sfdc.batchSize}" retrieveTarget="${work.dir}\src" />

	</target>

	<!-- commit changes -->
	<target name="commit">
		
		<tstamp>
			<format property="TODAY" pattern="yyyy-MM-dd hh:mm" locale="pt,BR" />
		</tstamp>
		
		<echo message="Commit change ${TODAY}" />

		<svn refid="svn.settings">
			<revert file="${work.dir}/src/package.xml"/>
			<add dir="${work.dir}/src" recurse="true" force="true"/>
			<commit dir="${work.dir}/src" message="UPDATE ${env.COMPUTERNAME}@${env.USERNAME} Data ${TODAY} - ${svn.message}"/>
		</svn>

	</target>
	
	<!-- The file unpackaged/package.xml lists what is to be retrieved -->
	<!--
	<target name="refresh">
		
		<sf:retrieve username="${sfdc.username}"   password="${sfdc.password}" 	sessionId="${sfdc.sessionId}" 
					 serverurl="${sfdc.serverurl}" maxPoll="${sfdc.maxPoll}" 	 
					 pollWaitMillis="${sdfc.pollWaitMillis}" unpackaged="${sfdc.xml.metadata}"
					 retrieveTarget="${metadata.result.dir}"/>
	</target>
	<target name="runTests">
		<sf:deploy username="${sfdc.username}"   password="${sfdc.password}" sessionId="${sfdc.sessionId}" serverurl="${sfdc.serverurl}"
				   deployroot="srctests" testLevel="RunAllTestsInOrg"
				   checkOnly="true" logType="Debugonly">
		</sf:deploy>
	</target>
	-->
</project>
